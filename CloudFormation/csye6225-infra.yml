AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 Demo
Parameters:
  Env:
    Type: String
    Description: Select the appropriate environment
    AllowedValues:
      - dev
      - prod
    Default: "prod"
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  VpcSubnet1CidrBlock:
    Description: "CIDR block for VPC subnet 1"
    Type: String
    Default: "10.0.0.0/24"
  VpcSubnet2CidrBlock:
    Description: "CIDR block for VPC subnet 2"
    Type: String
    Default: "10.0.1.0/24"
  VpcSubnet3CidrBlock:
    Description: "CIDR block for VPC subnet 3"
    Type: String
    Default: "10.0.2.0/24"
  VpcPrivateSubnet1CidrBlock:
    Description: "CIDR block for VPC private subnet 1"
    Type: String
    Default: "10.0.3.0/24"
  VpcPrivateSubnet2CidrBlock:
    Description: "CIDR block for VPC private subnet 2"
    Type: String
    Default: "10.0.4.0/24"
  VpcPrivateSubnet3CidrBlock:
    Description: "CIDR block for VPC private subnet 3"
    Type: String
    Default: "10.0.5.0/24"
  ImageId:
    Description: "Image id"
    Type: String
    Default: "ami-033b95fb8079dc481"
  KeyName:
    Description: "Key pair name for ec2"
    Type: String
    Default: "default"
  DatabaseUsername:
    Description: "Username of Database"
    Type: String
    Default: "csye6225"
  DatabasePassword:
    Description: "Password of Database"
    Type: String
    Default: "#Ovixa9bXYpb"
    NoEcho: "true"
  DatabaseName:
    Description: "Name of Database"
    Type: String
    Default: "csye6225"
    NoEcho: "true"
  DomainName:
    Description: "Name of Domain"
    Type: String
    Default: "prod.huanlinxiao.me."

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: "default"
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  myFirstSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref VpcSubnet1CidrBlock
      AvailabilityZone: !Select [0, !GetAZs  '' ]
      Tags:
      - Key: Name
        Value: Public Subnet (AZ1)
  mySecondSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref VpcSubnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs  '' ]
      Tags:
      - Key: Name
        Value: Public Subnet (AZ2)
  myThirdSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref VpcSubnet3CidrBlock
      AvailabilityZone: !Select [2, !GetAZs  '' ]
      Tags:
      - Key: Name
        Value: Public Subnet (AZ3)
  myFirstPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref VpcPrivateSubnet1CidrBlock
      AvailabilityZone: !Select [0, !GetAZs  '' ]
      Tags:
      - Key: Name
        Value: Private Subnet (AZ1)
  mySecondPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref VpcPrivateSubnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs  '' ]
      Tags:
      - Key: Name
        Value: Private Subnet (AZ2)
  myThirdPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref VpcPrivateSubnet3CidrBlock
      AvailabilityZone: !Select [2, !GetAZs  '' ]
      Tags:
      - Key: Name
        Value: Private Subnet (AZ3)
  myGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
      - Key: Name
        Value: !Ref AWS::StackName
  myGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: 
        Ref: myGateway
      VpcId:
        Ref: myVPC
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: 
        Ref: myVPC
  myRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: myGateway
      RouteTableId: 
        Ref: myRouteTable
  myFirstSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId:
        Ref: myRouteTable
      SubnetId:
        Ref: myFirstSubnet
  mySecondSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId:
        Ref: myRouteTable
      SubnetId:
        Ref: mySecondSubnet
  myThirdSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId:
        Ref: myRouteTable
      SubnetId:
        Ref: myThirdSubnet
  myPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: 
        Ref: myVPC
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable1
      SubnetId: !Ref myFirstPrivateSubnet
  myPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: 
        Ref: myVPC
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable2
      SubnetId: !Ref mySecondPrivateSubnet
  myPrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName
      VpcId: 
        Ref: myVPC
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable3
      SubnetId: !Ref myThirdPrivateSubnet
  myApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId:
          Ref: myVPC
        SecurityGroupEgress:
          - IpProtocol: "-1"
            CidrIp: 0.0.0.0/0
        SecurityGroupIngress:
          # - IpProtocol: tcp
          #   FromPort: 22
          #   ToPort: 22
          #   CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            SourceSecurityGroupId: 
              Ref: myLoadBalancerSecurityGroup
  myDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow database connection
        VpcId:
          Ref: myVPC
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 1024
            ToPort: 65535
            CidrIp: 0.0.0.0/0
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId: 
              Ref: myApplicationSecurityGroup
  myS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      AccessControl: "Private"
      BucketName: !Join ['.', [!Select [2, !Split ['/', !Ref AWS::StackId]], !Ref Env, "huanlinxiao.me"]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"

      LifecycleConfiguration:
        Rules:
          - Id: TransferRule
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  myRDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: MYSQL Parameter Group
      Family: mysql8.0
      Parameters:
        sql_mode: IGNORE_SPACE
        innodb_buffer_pool_size: '{DBInstanceClassMemory*3/4}'
  myDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: My dbs subnet group
      SubnetIds: 
        - !Ref myFirstPrivateSubnet
        - !Ref mySecondPrivateSubnet
        - !Ref myThirdPrivateSubnet
  myRDS:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: cye6225
      DBName: cye6225
      DBParameterGroupName: !Ref myRDSDBParameterGroup
      DBSubnetGroupName: !Ref myDBSubnetGroup
      Engine: mysql
      EngineVersion: "8.0.28"
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      MultiAZ: "false"
      Port: "3306"
      PubliclyAccessible: "false"
      StorageType: "gp2"
      VPCSecurityGroups: 
        - !Ref myDatabaseSecurityGroup
  myIAMPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:PutObjectAcl"
              - "s3:GetObject"
              - "s3:GetObjectAcl"
              - "s3:GetObjectAttributes"
              - "s3:DeleteObject"
              - "s3:List*"
            Resource: 
              - !Sub ["arn:aws:s3:::${BUCKET_NAME}", BUCKET_NAME: !Ref myS3Bucket]
              - !Sub ["arn:aws:s3:::${BUCKET_NAME}/*", BUCKET_NAME: !Ref myS3Bucket]
              - "arn:aws:s3:::codedeploy.huanlinxiao.me"
              - "arn:aws:s3:::codedeploy.huanlinxiao.me/*"
  ec2Role: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: "EC2-CSYE6225"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref myIAMPolicy
  myInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - Ref: "ec2Role"
  myLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Load balancer
        VpcId:
          Ref: myVPC
        SecurityGroupEgress:
          - IpProtocol: "-1"
            CidrIp: 0.0.0.0/0
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
  myLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: myGatewayAttachment
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref myLoadBalancerSecurityGroup
      Subnets:
        - !Ref myFirstSubnet
        - !Ref mySecondSubnet
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application
  myLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myLoadBalancerTargetGroup
      LoadBalancerArn: !Ref myLoadBalancer
      Port: 80
      Protocol: HTTP
  myLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: 
        Ref: myVPC
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: myGatewayAttachment
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvdh
            Ebs:
              VolumeSize: 20
              VolumeType: "gp2"
              DeleteOnTermination: true
        NetworkInterfaces: 
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            Groups: 
              - Ref: myApplicationSecurityGroup
            SubnetId: 
              Ref: myFirstSubnet
        ImageId: !Ref ImageId
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        IamInstanceProfile: 
          Arn: !GetAtt myInstanceProfile.Arn
        UserData:
          Fn::Base64: 
            !Sub 
              - |
                #!/bin/bash
                cat > /home/ec2-user/env.env << EOF
                BUCKET_NAME=${BUCKET_NAME}
                DATABASE_ADDRESS=${DATABASE_ADDRESS} 
                DATABASE_PORT=${DATABASE_PORT}
                DATABASE_USERNAME=${DATABASE_USERNAME}
                DATABASE_PASSWORD=${DATABASE_PASSWORD}
                DATABASE_NAME=${DATABASE_NAME}
                AWS_REGION=${AWS_REGION}
                EOF

                systemctl start web_service
              - BUCKET_NAME: !Ref myS3Bucket
                DATABASE_ADDRESS: !GetAtt myRDS.Endpoint.Address
                DATABASE_PORT: !GetAtt myRDS.Endpoint.Port
                DATABASE_USERNAME: !Ref DatabaseUsername
                DATABASE_PASSWORD: !Ref DatabasePassword
                DATABASE_NAME: !Ref DatabaseName
                AWS_REGION: !Ref AWS::Region
  myWebAppScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      Cooldown: '60'
      DesiredCapacity: 1
      HealthCheckGracePeriod: 30
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref myLoadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref myFirstSubnet
        - !Ref mySecondSubnet
        - !Ref myThirdSubnet

  myCPUUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref myWebAppScaleGroup
      Cooldown: 60
      ScalingAdjustment: 1

  myCPUDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref myWebAppScaleGroup
      Cooldown: 60
      ScalingAdjustment: -1

  myCPUUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmActions: 
        - !Ref myCPUUpPolicy
      AlarmDescription: Scale up if cpu > 5%
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 120 
      Statistic: Average
      Threshold: 5
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref myWebAppScaleGroup

  myCPUDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmActions: 
        - !Ref myCPUDownPolicy
      AlarmDescription: Scale down if cpu < 3%
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 120 
      Statistic: Average
      Threshold: 3
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref myWebAppScaleGroup

  myDomainRecords:
    Type: AWS::Route53::RecordSet
    Properties: 
      HostedZoneName: !Ref DomainName
      Name: !Ref DomainName
      Type: A
      AliasTarget: 
        DNSName: !GetAtt myLoadBalancer.DNSName
        HostedZoneId: !GetAtt myLoadBalancer.CanonicalHostedZoneID

  myCodeDeployRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: "CodeDeployServiceRole"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codedeploy.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  myCodeDeploy:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: csye6225-webapp
      ComputePlatform: Server
  myCodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref myCodeDeploy
      AutoScalingGroups:
        - !Ref myWebAppScaleGroup
      AutoRollbackConfiguration:
        Enabled: true
        Events: 
          - DEPLOYMENT_FAILURE
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: csye6225-webapp-deployment
      DeploymentStyle: 
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      LoadBalancerInfo: 
        TargetGroupInfoList:
          - Name: !GetAtt myLoadBalancerTargetGroup.TargetGroupName
      ServiceRoleArn: !GetAtt myCodeDeployRole.Arn

Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref myVPC
  BucketName:
    Description: The Bucket Name
    Value: !Ref myS3Bucket
  DatabaseAddress:
    Description: The Database address
    Value: !GetAtt myRDS.Endpoint.Address
  DatabasePort:
    Description: The Database Port
    Value: !GetAtt myRDS.Endpoint.Port
